집계하기 

집계 함수 

SUM , MIN, MAX,  COUNT, AVG

 SELECT COUNT(TITLE) FROM NOTICE;
 -> 18
 INSERT INTO NOTICE(ID ,REGDATE , HIT, WRITER_ID) VALUES (8 , SYSDATE, 3 ,'newlec');
 commit;
 
 SELECT * FROM NOTICE;

 SELECT COUNT(TITLE) FROM NOTICE;
 -> 18
 -- 같게 나오는데 이유는 NULL 값은 세지않아서 같게나온다.

 SELECT COUNT(*) FROM NOTICE; 는 가능하나 연산이 느리다해서 무조건 값이있는 ID로 조회하는것이 좋다.

 SELECT SUM(HIT) FROM NOTICE;
-- HIT의 총 합은 얼마인가?
 SELECT AVG(HIT) FROM NOTICE;
-- HIT의 평균은 얼마인가?

  SELECT WRITER_ID ,COUNT(ID) COUNT FROM NOTICE GROUP BY WRITER_ID;
-- 같은아이디로 몇번 작성했는지 알고싶을대 

 SELECT WRITER_ID ,COUNT(ID) COUNT FROM NOTICE GROUP BY WRITER_ID ORDER BY COUNT DESC;
 --- FROM -> CONNECT BY -> WHERE -> GROUP BY -> HAVING -> SELECT -> ORDER BY 순이다.
 -- FROM 절에서 별칭한 NOTICE는 어디서든 쓸수있으나
 -- SELECT 에서 COUNT(ID) 을 별칭한 COUNT 는 ORDER BY 에서만 쓸수있고
 -- 나머지 뒤에 HAVING , GROUP BY ..... 절은 사용할수 없다.

--------------------------------------- HAVING 절 ----------------------------------------

회원별 게시글 수를 조회하시오. 단 게시글이 2이하인 레코드만 출력하시오.



SELECT , FROM, WHERE ,GROUP BY, HAVING , ORDER BY
조건 순서는 이렇게되나

FROM, WHERE ,GROUP BY, HAVING ,ORDER BY, SELECT
실행순서는 위와같다.

SELECT WRITER_ID, COUNT(N.ID) FROM NOTICE N
WHERE COUNT(N.ID) < 2 
GROUP BY WRITER_ID;
-- 위와같은것은 에러가난다 따라서. (그룹 함수가 허가되지 않는다는 에러가 뜬다.)
 
SELECT WRITER_ID, COUNT(N.ID) FROM NOTICE N 
GROUP BY WRITER_ID
HAVING COUNT(N.ID) < 2;
-- 따라서 이를 대처하기위한 HAVING 절이 있다.

------------------------------------- 순위 함수 -------------------------------------------

 SELECT ROWNUM, ID , TITLE, WRITER_ID , REGDATE , HIT FROM NOTICE ORDER BY HIT; 
-- ROWNUM WHERE절 쯤에서 만들어진다. 따라서 ROWNUM 이 제대로 출력이안된다.

SELECT ROW_NUMBER() OVER (ORDER BY HIT) AS "NUMBER", ID , TITLE, WRITER_ID , REGDATE , HIT FROM NOTICE; 
-- ROWNUM WHERE절 쯤에서 만들어진다 
 -- WHERE
 -- GROUP BY
 -- HAVING
 -- ORDER BY HIT;

SELECT RANK() OVER (ORDER BY HIT) AS "NUMBER", ID , TITLE, WRITER_ID , REGDATE , HIT FROM NOTICE; 
-- HIT을 오름차순으로 정렬하는데 HIT의 숫자가같으면 등수도 같ㅇ진다. HIT에 따라 등수를매겨주는 함수이다.
-- RANK()OVER( ORDER BY HIT) 


SELECT DENSE_RANK() OVER (ORDER BY HIT) AS "NUMBER", ID , TITLE, WRITER_ID , REGDATE 
, HIT FROM NOTICE; 
-- DENSE_RANK() OVER (ORDER BY HIT) 는 HIT을 비교해서 공동 5등이 3명이면 다음은 8등이나오게 되는데 
-- 이거를 그냥 공동5등이 있어도 다음등수를 6등으로 해주는 함수이다.

SELECT DENSE_RANK() OVER (PARTITION BY WRITER_ID ORDER BY HIT DESC) AS "NUMBER", ID , TITLE, WRITER_ID , REGDATE 
, HIT FROM NOTICE; 
-- WRITER_ID 가 같은 애들끼리 HIT의 얼마나더 큰지로 등수를 매긴다. 
-- DENSE_RANK() OVER ( PARTITON BY WRITER_ID ORDER BY HIT) 

---------------------------------- 부조회 ( 서브쿼리 ) ----------------------------------------

SELECT절은 순서대로 실행되어야한다.

하지만 만약에 SELECT 절의 순서를 바꿔야하는 상황이오면 어떻게해야되나.?????

그럴경우에는 부조회(서브쿼리)를 사용하면된당


-----구절의 순서를 바꿔야 하는 경우
SELECT * FROM MEMBER WHERE ROWNUM BETWEEN 1 AND 10
--만약에 여기서 최신등록순으로 정렬한 결과에서 상위 열명을 원하는 경우라면?

SELECT * FROM MEMBER ORDER BY REGDATE DESC
WHERE ROWNUM BETWEEN 1 AND 10 ---> 순서때문에 오류 발생한다.

SELECT * -- 4
FROM NOTICE -- 1
ORDER BY REGDATE DSEC -- 2
WHERE ROWNUM BETWEEN 1 AND 5; -- 3
-- 위와같은 상황은 에러가난다. 
따라서

아래와 같이 해야한다. ( ) 을 붙여준다. -> 먼저 계산하겠다. 

SELECT * 
FROM( SELECT * FROM MEMBER ORDER BY REGDATE DESC ) 
WHERE ROWNUM BETWEEN 1 AND 10

-- FROM절은 무조건 테이블형식이와야하는건 아니다. 격자형 데이터 또는 격자형 결과물이 있으면
그녀석을 FROM 절에 사용할수 있다. 

나이가 30 이상인 회원 목록을 조회하시오.
SELECT * FROM MEMBER WEHRE AGE >= 30;

나이가 평균나이 이상인 회원 목록을 조회하시오
SELECT * FROM MEMBER WHERE AGE >= (SELECT AVG(AGE) FROM MEMBER);
-- 서브쿼리를 사용해서 평균나이 이상을 먼저구한다.

-----------------------------------  JOIN ! -------------------------------------------------

조인의 종류

INNER JOIN , OUTER JOIN , SELF JOIN , CROSS JOIN ( Cartesian Product )

--- INNER JOIN

JOIN 예
 ID		NAME		ID	TITLE		WRITER_ID
NEWLEC 	        뉴렉 ---------	1	ORACLE 개요	NEWLEC
				2	SQL 구문	NEWLEC
				3	DML 사용하기	NEWLEC
	부모 테이블			자식 테이블 


NEWLECT 은 글을 3개썻다. 테이블 2개가있다 등록하는 관계로서 2개가있다. 
위를 합치기위해서는 NEWLECT 뉴렉을 두개 더만들어서

 ID		NAME		ID	TITLE		WRITER_ID
NEWLEC 	        뉴렉 ---------	1	ORACLE 개요	NEWLEC
NEWLEC		뉴렉		2	SQL 구문	NEWLEC
NEWLEC		뉴렉		3	DML 사용하기	NEWLEC
	부모 테이블			자식 테이블 

위처럼 만들수있다.
가능하면 중복을 제거해서 합치면 좋다.



ID		NAME 			ID 	TITLE		WRITER_ID
NEWLEC		뉴렉 -----------------	1	ORACLE개요	NEWLEC
YJS		유재석			2	SQL구문		NEWLEC
JUNG		정형돈			3	DML사용하기	NEWLEC
KANG		강호동

서로관계가 있는 레코드들은 INNER ( NEWLEC )
서로관계가 없는 레코드들은 OUTER( YJS , JUNG, KANG )

그럼이제 합쳐질때 YJS JUNG KANG은 사라지고 NEWLECT 을 두개 더만들어서 부모 테이블에서
합쳐지게 된다.


사용방법 예)
 FROM MEMBER INNER JOIN NOTICE ON MEMBER.ID = NOTICE.WRITER_ID; -- 데이터베이스 표준 명령문
 -- 반드시 쓸데는 MEBER INNER JOIN NOTICE 를 쓴다
 -- 그리고 ON을 써서 MEMBER.ID = NOTICE.WRITER_ID는 서로같은 관계를 가지고있다를 밝혀줘야한다.

 SELECT * FROM NOTICE N JOIN MEMBER M ON N.WRITER_ID = M.ID;
 -- 그냥 JOIN만쓰면 알아서 INNER JOIN으로 디폴드값이 잇다.

--- OUTER JOIN

참조키를 기준으로 일치하지 않는 행도 포함시키는 조인

MEMBER LEFT/RIGHT/FUUL OUTER JOIN NOTICE ON MEMBER."ID" = NOTICE.WRITER

ID		NAME 			ID 	TITLE		WRITER_ID
NEWLEC		뉴렉 -----------------	1	ORACLE개요	NEWLEC
YJS		유재석			2	SQL구문		NEWLEC
JUNG		정형돈			3	DML사용하기	NEWLEC
KANG		강호동	 		4	DML사용하기	DRAGON
					5	DML사용하기	DRAGON

OUTER 가 왼쪾에는 3개 오른쪽에는 2개 
왼쪽에 있는에를 포함시켜주겠다. -> LEFT OUTER JOIN
오른쪽에 있는애를 포함시켜주겠다. -> RIGHT OUTER JOIN
양쪽에 모든 OUTER들을 다포함시키겟다. -> FULL OUTER JOIN

ID		NAME 			ID 	TITLE		WRITER_ID
NEWLEC		뉴렉 -----------------	1	ORACLE개요	NEWLEC
YJS		유재석			2	SQL구문		NEWLEC
JUNG		정형돈			3	DML사용하기	NEWLEC
KANG		강호동	 		4	DML사용하기	DRAGON
					5	DML사용하기	DRAGON


 SELECT * FROM NOTICE N LEFT OUTER JOIN MEMBER M ON N.WRITER_ID = M.ID;
-- 실행하면 오른쪽에 관계없는 -- 4 DML사용하기 DRAGON -- , -- 5 DML사용하기 DRAGON -- 두개는 사라진다
-- 왼쪾에 OUTER는 포함한다. 즉, 관계없는 YJS JUNG KANG 은 포함한다.
 
ID		NAME 			ID 	TITLE		WRITER_ID
NEWLEC		뉴렉 			1	ORACLE개요	NEWLEC
NEWLEC		뉴렉			2	SQL구문		NEWLEC
NEWLEC		뉴렉			3	DML사용하기	NEWLEC
YJS		유재석			NULL	NULL		NULL
JUNG		정형돈			NULL	NULL		NULL
KANG		강호동	 		NULL	NULL		NULL

즉 위와같은 결과가 나온다.

 SELECT * FROM NOTICE N LEFT OUTER JOIN MEMBER M ON N.WRITER_ID = M.ID;
 -- 그냥 JOIN만쓰면 알아서 INNER JOIN으로 디폴드값이 잇다.
 -- 여기서 LFET 는 부모테이블이 아니고 현재 식에서의 왼쪾 즉 NOTICE를 가르킨다.

 SELECT * FROM NOTICE N RIGHT OUTER JOIN MEMBER M ON N.WRITER_ID = M.ID;
 SELECT * FROM NOTICE N FULL OUTER JOIN MEMBER M ON N.WRITER_ID = M.ID;

INNER JOIN 보다는 OUTER JOIN 을더 많이쓴다. 이유는?

-------------------------- OUTER JOIN 을 이용한 게시글 목록 쿼리 ---------------------------------

SELECT SEQ , TITLE, NAME
FROM MEMBER INNER JOIN NOTICE ON MEMBER."ID" = NOTICE.WRITER_ID;

SELECT ID, NAME, NAME FROM
MEMBER
INNER JOIN NOTICE ON MEMBER.ID= NOTICE.WRITER_ID;

	게시글의 컬렴명을 식별하기 위해 테이블명을 사용 
SELECT NOTICE.ID, NOTICE.NAME , MEMBER.NAME FROM
MEMBER
INNER JOIN NOTICE ON MEMBER.ID = NOTICE.WRITER_ID

	컬럼을 지정하는 식별자를 줄이기 위해서 테이블의 별칭을 사용
SELECT N.ID, N.WRITER_ID, M.NAME
FROM MEMBER M INNER JOIN NOTICE N
	ON M.ID = N.WRITER_ID -- 에러 발생한다.


 -- ID , NAME 그리고 회원별작성한 게시글 수를 조회하시오
 SELECT M.ID , M.NAME , COUNT(N.ID)
 FROM MEMBER M INNER JOIN NOTICE N ON
 M.ID = N.WRITER_ID
 GROUP BY M.ID , M.NAME;
 -- 게시글이 0인 회원이 하나도 없다?
 
 SELECT M.ID, M.NAME , COUNT(N.ID) FROM
 MEMBER M LEFT OUTER JOIN NOTICE N
 ON M.ID = N.WRITER_ID
 GROUP BY M.ID, M.NAME;
 -- MEMBER를 다출력하기 ( LEFT OUTER JOIN )이므로 MEMBER가 주인공
 -- 그러고 NOTICE만족하는애들도 다 출력하기
 
------------------------------------ SELF JOIN ---------------------------------------------------

SELF JOIN 이라는 명령어가 있는게 아니다.
SELF JOIN 은 자기가 자기를 합치는거다.

데이터가 서로 포함 관계를 가지는 경우 : 담당 , 구성 , 연락


 SELECT M.* , B.NAME BOSS_NAME
 FROM MEMBER M LEFT OUTER JOIN MEMBER B ON B.ID = M.BOSS_ID;
 
 -- SELF JOIN 은 은근 많이 쓰인다.
 -- 댓글이 댓글을 참조할때 
 -- 카테고리가 카테고리를 참조할때

------------------------------------- ORACLE 만의 조인 과거에 ORCALE 이 썻던 JOIN ----------------

	ANSI INNER JOIN
SELECT N.ID, N.TITLE, M.NAME
FROM
MEMBER M
INNER JOIN NOTICE N ON M.ID = N.WRITER_ID
WHERE M.ID = 'newlec';


	Oracle INNER JOIN
SELECT N.ID , N.TITLE , M.NAME
FROM MEMBER M , NOTICE N
WHERE M.ID = N.WRITER_ID
AND M.ID = 'newlec; 


	ASNI CROSS JOIN  -- CROSS JOIN 이라는 것은 관계 있다 없다 전혀상관없이
			 -- 두게의 테이블을 곱하기로 테이블결과를만들어내는것 업무에선 잘안쓰임
 
SELECT N.*, M.NAME WRITER_NAME
FROM MEMBER M CROSS JOIN NOTICE N

오라클 과거 문장을 보여준이유는 이걸써라가 아니고 언제라도 혹시 오라클 문장으로 씌어진 것을
보게될수도잇으니 이게 이거였지 코드 해석용으로 알려준것이다!

-------------------------------------- UNION ---------------------------------------------

언제쓰냐? 예를들면 글 게시판 테이블이 3개 있다고 치면 그 3개의 테이블을 하나의 테이블처럼해서
통합검색을 하고싶을떄 쓴다.

하나의 테이블일지라도 a 조건 b 조건 c 조건 셋다맞는 조건을 합칠때도 쓴다.

종류 : UNION	MINUS	INTERSECT	UNION ALL



---------- UNION ---------
[ NOTICE ]
ID	TITLE		WRITER_ID
1	ORACLE 개요	NEWLEC
2	SQL 구문	NEWLEC
3	DML1 사용하기	NEWLEC

[ QNA ]
ID	TITLE		WRITER_ID
1	ORACLE 개요	NEWLEC
2	SQL 구문	NEWLEC
3	DML 사용하기	NEWLEC

[NOTICE] UNION [ QNA ] 
UNION 두 테이블 에서 같은 데이터가 있을때 그것을 하나로 줄인다.
1	ORACLE 개요	NEWLEC
2	SQL 구문	NEWLEC
3	DML1 사용하기	NEWLEC
4	DML 사용하기 	NEWLEC 만 출력된다!.



---------- MINUS ---------
[ NOTICE ]
ID	TITLE		WRITER_ID
1	ORACLE 개요	NEWLEC
2	SQL 구문	NEWLEC
3	DML1 사용하기	NEWLEC

[ QNA ]
ID	TITLE		WRITER_ID
1	ORACLE 개요	NEWLEC
2	SQL 구문	NEWLEC
3	DML 사용하기	NEWLEC

[NOTICE] MINUS [QNA] => 3 DML1 사용하기 NEWLECT 이 데이터만 남는다



---------- INTERSECT ---------
[ NOTICE ]
ID	TITLE		WRITER_ID
1	ORACLE 개요	NEWLEC
2	SQL 구문	NEWLEC
3	DML1 사용하기	NEWLEC

[ QNA ]
ID	TITLE		WRITER_ID
1	ORACLE 개요	NEWLEC
2	SQL 구문	NEWLEC
3	DML 사용하기	NEWLEC

INTERSECT 연산자는 공통된것만 출력한다
-> [NOTICE] INTERSECT [QNA] = 1 ORACLE 개요 NEWLEC
			      2 SQL 구문    NEWLEC
요 두개만 남게된다.



---------- UNION ALL ---------
[ NOTICE ]
ID	TITLE		WRITER_ID
1	ORACLE 개요	NEWLEC
2	SQL 구문	NEWLEC
3	DML1 사용하기	NEWLEC

[ QNA ]
ID	TITLE		WRITER_ID
1	ORACLE 개요	NEWLEC
2	SQL 구문	NEWLEC
3	DML 사용하기	NEWLEC

[NOTICE] UNION ALL [QNA] -> 6개의 데이터가 다 나온다. ( NOTICE 출력하고 밑에 QNA 출력 )

--------------------------------- VIEW(뷰) 만들기 --------------------------------------------

물리적인 데이터구조 (Table) 와 개념적인 데이터구조 (View)의 차이

ID	NAME	ID	TITLE		WRITER_ID	ID	COMMENT		NOTICE_ID
NEWLEC  뉴렉	1	ORACLE 개요	NEWLEC		1	많은 도음 받음	1
YJS     유재석	2	SQL 구문	NEWLEC		2	정리를 잘하네요	1
JUNG	정형돈	3	DML 사용하기	NEWLEC		3	감사합니다.	3
KANG	강호동	4	DML 사용하기	DRAGON
		5	DML 사용하기	DRAGON

쿼리문장을 이렇게 짜야한다.
SELECT N.ID, N.TITLE, N.WRITER_ID , M.NAME, COUNT(C.ID) CNT FROM
MEMBER M
RIGHT OUTER JOIN NOTICE N ON M.ID = N.WRITER_ID
LEFT OUTER JOIN "COMMENT" C ON N.ID = C.NOTICE_ID
GROUP BY N.ID , N.TITLE, N.WRITER_ID, M.NAME;

---- 쿼리문장을 VIEW 로 정의해서 사용하기
CREATE VIEW NOTICEVIEW
AS
	SELECT N.ID, N.TITLE, N.WRITER_ID , M.NAME, COUNT(C.ID) CNT FROM
	MEMBER M
	RIGHT OUTER JOIN NOTICE N ON M.ID = N.WRITER_ID
	LEFT OUTER JOIN "COMMENT" C ON N.ID = C.NOTICE_ID
	GROUP BY N.ID , N.TITLE, N.WRITER_ID, M.NAME;

---- VIEW 를 이용해 쿼리하기
SELECT * FROM NOTICEVIEW WHERE TITLE LIKE '%오%'
ORDER BY SEQ DESC;

SELECT * FROM NOTICEVIEW;

-------------------------------- 데이터 딕셔너리 -------------------------------------------

딕셔너리는 이제 CONSOLE 창에서만 작업할때는 필요했는데

이제는 윈도우에서 다 보여주는 식이여서 별로 안쓰인다. 굳이 쓸필요가?


-------------------------------- 제약 조건 -------------------------------------------------

도메인 , 엔티티 , 릴레이션

데이터가 제약이라는것이 없이 데이터를 넣으면 안되므로 제약조건을 걸어서 올바른 데이터가 들어갈수있도록
하는것

도메인

유요한 값의 범위

예 )    학번 : 0 보다큰 정수
	납임금 : 0보다 크고 100만원 보다 작은 정수
	이름 : 20자 내의 문자		
	납입일 : 2012년 이후 날짜	

도메인 제약조건

속성에 도메인이 아닌 값이 올 수 없도록 하는 제약조건

	NOT NULL		DEAFULT			CHECK

-- 테이블을 생성할 때 적용방법

CREATE TABLE TEST
(
	ID	VARCHAR2(50) NOT NULL,  -> 이뜻은 반드시 값이 있어야한다.
	EMAIL	VARCHAR2(200) NULL,
	PHONE	CHAR(13) NOTNULL
)

INSERT INTO TEST(ID) VALUES('222');

	SQL 오류 : ORA-01400 : NULL 을 ( "HR", "TEST", "PHONE" )안에 삽입할 수 없습니다.

ALTER TABLE TEST MODIFY EAMIL VARCHAR2(200), NOT NULL;
하지만 도구가 발달되서 이렇게 명령어를 직접쳐서 하는경우는 적다.

CREATE TABLE TEST
(
	ID	VARCHAR2(50) NOT NULL,
	EMAIL	VARCHAR2(200) NULL,
	PHONE	CHAR(13) NOT NULL,
	PWD	VARCHAR2(200) DEFAULT '111' -> 굳이 직접 입력할 필요 없는 컬럼들
						- 등록일
						- 조회수
						- 관리자가 부여하는 비번
)
			
ALTER TABLE TEST MODIFY EMAIL VARCHAR2(200) DEFAULT '111';

INSERT INTO TEST("UID" , 'PHONE' ) VALUES('NEWLEC' , '222');

DEFAULT 는 직접값을 넣지않으면알아서 값을 넣어주는것

------------------------------- CHECK 제약조건 ----------------------------------------

테이블을 생성할 때 설정하는 방법 CHECK 가 DOMAIN 제약조건에서 젤 중요한 조건이다.

CREATE TABLE TEST
(
	ID	VARCHAR2(50) NULL,
	PHONE	VARCHAR2(200) CHECK(PHONE LIKE '010-%-____') NOT NULL,
	EMAIL 	VARCHAR2(500) NULL
)

CHECK(PHONE LIKE '010-%-____') PHONE은 입력조건이 저렇게되야만 데이터가 입력된다.

테이블을 생성 한 후에 적용방법

ALTER TABLE TEST ADD CONSTRAINT CK_TEST_PHONE CHECK(PHONE LIKE '010-%-____');
위와 같이 할수도있지만 

윈도우창 으로해서 테이블편집에가서 제약조건에 들어가서 제약조건을 직접써서 손쉽게 할수도있다.

------------------------------ 정규식을 이용한 체크 제약조건 -------------------------------------

-- 	쿼리문 이용
  ALTER TABLE MEMBER
 ADD CONSTRAINT MEMBER_PHONE_CHK1 CHECK(REGEXP_LIKE(PHONE , '^01[01]-\d{3,4}-\d{4}$'));
-- 핸드폰번호정규식 하는방법

 SELECT * FROM user_constraints 
 WHERE TABLE_NAME ='MEMBER';
-- 정규식을 뽑는방법 MEMBER 테이블에서



-- 위와같이 명령어로해도되지만 시각적으로 윈도우창으로해서 보기좋게 해도된다.

-------------------------------- Entity 제약조건 ------------------------------------------

Primary Key / Unique

중복된 레코드가 없도록 제한한다.

레코드를 식별할 수 있어야한다. 적어도 하나가있어야한다. 이것을 식별컬럼이라한다. KEY컬럼이라고도한다.
Primary KEY 제약조건 : 식별키 절대 중복발생할수없으면서 NULL도 들어오면안된다.

중복이 발생하면안되는 컬럼이있다.
Unique 제약조건 : NULL은 허용하냐 중복되는 컬럼

CREATE TABLE NOTICE
(
	ID		NUMBER 		PRIMARY KEY,		-- 기본키 제약 조건
	TITLE		VARCHAR2(300)	NOT NULL,		-- NOT NULL
	WRITER_ID	VARCHAR2(50)	NOT NULL UNIQUE,	-- NOT NULL / UNIQUE
	CONTENT		VARCHAR2(4000),
	REGDATE		DATE		DEFAULT SYSDATE,	-- 기본값 현재 날짜
	HIT		NUMBER		DEFAULT 0 		-- 기본값 0

	CONSTRAINT NOTICE_ID_PK PRIMARY KEY(ID) 라 쓰면 이름도 부여된다.
	CONSTRAINT NOTICE_WRITER_ID_UK UNIQUE(WRITER_ID)
)


테이블을미리 만들어놨으면
ALTER TABLE NOTICE
ADD CONSTRAINT NOTICE_ID_PK PRIMARY KEY(ID);

ALTER TABLE NOTICE
ADD CONSTRAINT NOTICE_WRITER_UK UNIQUE(WRITER_ID);

-- 위처럼 할수도 잇지만 편집도구가잇어서 편집도구쓰는게 좋다.

----------------------------------- 시퀀스 ( Sequence ) -----------------------------------------

영어로말하면 시퀀스 한국어로말하면 일련번호

일련번호를 계속해서 뽑아야하는 경우가생김

자동으로 1씩 증가하게하는것
