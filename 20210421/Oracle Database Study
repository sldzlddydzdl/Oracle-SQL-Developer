
문자열 함수

문자열 추출함수 SUBSTR( 문자열 , 시작위치 , 길이)

SELECT SUBSTR( 'HELLO' , 1, 3 ) FROM MEMBERS;
-> 첫번째 문자부터 3개를 짤라줘라 -> HEL

SELECT SUBSTR( 'HELLO' , 3 ) FROM MEMBERS;
H E L L O   3번째 부터 짤라줘라 -> LLO
1 2 3 4 5	

SELECT SUBSTRB( 'HELLO' , 3 ) FROM MEMBERS;
3번째 바이트 부터 짤라줘라 -> LLO
-- 근데 만약 한글을 한글자에 3바이트라는걸 염려하면 한글문자열은 다르다!

SELECT SUBSTR( NAME , 2 ) FROM MEMBER;


-- 모든 학생의 이름과 출생 월만을 조회하시오.

SELECT SUBSTR( BIRTHDAY , 5 ,2 ) FROM MEMBER;

SELECT NAME AS "이름" , SUBSTR ( BIRTHDAY , 5 ,2 ) AS MONTH FROM MEMBER;

-- 회원중에서 전화번호가 010 으로 시작하는 모든정보를 출력하시오
SELECT * FROM MEMBER WHERE SUBSTR( PHONE ,1 ,3) = '010';

-- 회언중에서 생년 월이 7,8,9 월인 회원의 모든 정보를 출력하시오
SELECT * FROM MEMBER WHERE REGEXP_LIKE(SUBSTR ( BIRTHDAY , 5 , 2) , '0[7-9]');
SELECT * FROM MEMBER WHERE SUBSTR( BIRTHDAY , 6, 2 ) IN ( '07', '08' , '09' );

-- 회원중에서 생년 월이 7, 8, 9 월이 아닌 회원의 모든 정보를 출력하시오.
SELECT * FROM MEMBER WHERE SUBSTR( BIRTHDYA , 6, 2 ) NOT IN ( '07' '08' , '09');
SELECT * FROM MEMBER WHERE REGEXP_LIKE(SUBSTR ( BIRTHDAY , 5, 2 ) , '0[7-9]' );

-- 회원중에서 전화번호를 등록하지 않은 회원 중에서 생년 월이 7 , 8, 9 월인
-- 모든 정보를 출력하시오

SELECT * FROM MEMBER WHERE PHONE IS NULL AND SUBSTR( BIRTHDAY , 5 ,2 ) IN ( '07' , '08' ,'09' );
SELECT * FROM MEMBER WHERE SUBSTR( BIRTHDAY , 5, 2 ) IN ( '07', '08', '09' ) AND PHONE IS NULL;

------------------------------- 문자열 덧셈 함수 ----------------------------------------

SELECT CONCAT ( '홍', '길동' ) FROM DUAL;

문자열 연산

SELECT 3 + '4' FROM DUAL;
SELECT 3 + '4A' FROM DUAL; 
SELECT 3 || '4' FROM DUAL; -> 이게 문자열 연산 


문자열 트림 함수

SELECT LTRIM('   HELLO   ') FROM DUAL; -> 왼쪽 빈공간만 없애줌
SELECT RTRIM('   HELLO   ') FROM DUAL; -> 오른쪽 빈공간만 없애줌
SELECT TRIM('   HELLO   ') FROM DUAL; -> 양쪽 빈공간을 없애줌

 
문자열 소문자 또는 대문자로 변경하기

SELECT LOWER('NeWLEC') FROM DUAL;
SELECT UPPER('neWLec') FROM DUAL;

회원의 아이디가 'newlec'인 회원을 조회하시오. (단 소/대문자를 가리지 않음)
SELECT * FROM MEMBER WHERE ID = 'NEWLEC'; -> 'NEWLEC'(대문자 아이만 찾음)
SELECT * FROM MEMBER WHERE ID = 'newlec'; -> 'newlec'(소문자 아이만 찾음)

SELECT * FROM MEMBER WHERE UPPER(ID) = 'NEWLEC'; 
-- ID의 소문자애들을 대문자로 다 바꾼후 'NEWLEC'과 과같은것을 찾는것이므로
-- 소문자 아이들도 찾을수 있다. 
 
문자열 대치 함수 REPLACE(문자열 , 찾는 문자열 ,대치할 문자열) / TRANSLATE()

SELECT REPLACE('WHERE WE ARE' , 'WE' ,'YOU' ) FROM DUAL; 
--  WHERE WE ARE 에서 WE 를 YOU로 바꿔주는 함수 , 즉 WHERE WE ARE -> WHERE YOU ARE

SELECT TRANSLATE('WHERE WE ARE' , 'WE' , 'YOU') FROM DUAL;
-- WHERE WE ARE 에서 W 는 Y 로 바꿔주고 E 는 O로 바꿔준다.
-- YHORO YO ARO 로 바뀐다. 

회원의 이름과 주소를 조회하시오( 단. 주소는 빈칸 없이 출력하시오 )
SELECT NAME , REPLACE(ADDRESS, ' ', '') FROM STUDENTS;

---------------------------------- 문자열 패딩 함수 ------------------------------------------

SELECT LPAD('HEELO' ,5) FROM DUAL;
-- HELLO
SELECT LPAD('HEELO' , 5 ,'0') FROM DUAL;
-- HELLO
SELECT LPAD('HEELO' , 10 , '0') FROM DUAL;
-- 00000HEELO
SELECT RPAD('HEELO' , 10, '0' ) FROM DUAL;
-- HEELO00000

SELECT NAME FROM MEMBER;

-- 회원의 이름을 조회하시오, ( 단, 이름의 길이가 3자가 안되는 경우는  오른쪽을 
-- 밑줄('_') 로 채우시오.)
SELECT RPAD(NAME , 6, '_' ) , RPAD(NAME, 3 , '_') FROM MEMBER;

----------------------- 첫글자를 대문자로 바꾸는 함수 INITCAP(문자열) ---------------------------

SELECT INITCAP('the ....') FROM DUAL;

SELECT INITCAP('the most important things is ...') FROM DUAL;
-- The Most Important Things Is ... 가 출력된다.

SELECT INITCAP('the most imp하이ortant thi안녕ngs is ...') FROM DUAL;
 -- The Most Imp하이Ortant Thi안녕Ngs Is ... 처럼 한글다음도 대문자로 출력되서 
 -- 별로 효울적이지 않은함수이다.
 

 ------------ 문자열 검색 함수 INSTR( 문자열 ,  검색문자열 , 위치 , 찾을 수 )----------

 -- 숫자를 반환하는 문자열 함수
 -- 문자열 검색함수 INSTR(문자열 , 검색문자열, 위치, 찾을 수) 
 SELECT INSTR('ALL WE NEED TO IS JUST TO...' , 'TO') FROM DUAL;
 -- 13이 출력된다 'TO'의 위치를 정수값으로 반환해준다.
  
 SELECT INSTR('ALL WE NEED TO IS JUST TO...' , 'TO' , 15) FROM DUAL;
 -- 24가 출력된다 글자길이가 15이상부터 'TO'가 나오는 위치를 반환해줘라.
 
 SELECT INSTR('ALL WE NEED TO IS JUST TO...' , 'TO' , 1 , 2 ) FROM DUAL;
 -- 24 출력 된다. TO를 찾는데 두번째 에 있는 TO를 찾아줘라


회원의 전화번호에서 두 번째 대시(-) 문자가 존재하는 위치를 출력하시오.
SELECT INSTR(PHONE , '-' , 1, 2) FROM MEMBER;

회원의 전화번호에서 첫 번째 대시(-) 문자와 두 번째 대시(-) 문자 사이의 간격은?
SELECT INSTR(PHONE , '-' , 1, 2) - INSTR(PHONE , '-' , 1 , 1) -1 FROM MEMBER;

회원의 전화번호에서 첫 번째와 두번째 사이의 국번을 출력하시오.
SELECT SUBSTR(PHONE , INSTR(PHONE , '-' , 1, 1) + 1 , 4 ) FROM MEMBER;
(만약 가운데 국번이 3글자일수도잇으니)
SELECT SUBSTR(PHONE , 5 , INSTR(PHONE, '-' , 1, 2) - INSTR(PHONE , '-' ,1 , 1 ) -1 ) FROM MEMBER;

---------------------------------- 문자열 길이를 얻는 함수 -----------------------------------

문자열 깅리를 얻는 함수
SELECT LENGTH('WHERE WE ARE') FROM DUAL; 

모든 회원의 핸드폰 번호와 번호의 문자열 길이를 조회하시오.
SELECT PHONE, LENGTH(PHONE) FROM MEMBER; 

======== 함수중첩 ==========
만약에 회원의 전화번호 컬럼에 포함된 문자 '-' 을 없앤 전화번호의 길이를 출력하시오
 SELECT LENGTH(REPLACE(PHONE,'-','')) FROM MEMBER;

-- 코드값을 반환하는 함수
SELECT ASCII('A') FROM DUAL;
-> 65

-- 코드 값으로 문자를 반환하는 함수
SELECT CHR(65) FROM DUAL;
-> A

------------------------------------------ 숫자 함수 ---------------------------------------

절대값을 구하는 함수 ABS(n)

SELECT ABS(35) , ASB(-35) FROM DUAL;
-> 35 , 35

음수/양수를 알려주는 함수 SIGN(n)

SELECT SIGN(35) , SIGN(-35) , SIGN(0) FROM DUAL;
-> 1 , -1 , 0

숫자의 반올림 값을 알려주는 함수 ROUND(n , i)
SELECT ROUND(34.456789), ROUND(34.56789) FROM DUAL;
-> 34 , 35

SELECT ROUND(12.3456789 ,2) ,ROUND (12.3456789 , 3) FROM DUAL;
-> 12.35 , 12.346

숫자의 나머지 값을 반환하는 함수 MOD(n1, n2)
SELECT TRUNC(17/5) 몫, MOD(17,5) 나머지 FROM DUAL;
-> 3 , 2 

숫자의 제곱을 구하는 함수와 제곱근을 구하는 함수 POWER(n1, n2) / SQRT(n)
SELECT POWER(5 ,2) SQRT(25) FROM DUAL;
-> 25 , 5

-------------------------------------- 날짜 함수 ------------------------------------------

현재 시간을 얻는 함수

SELECT SYSDATE, CURRENT_DATE, SYSTIMESTAMP, 	CURRENT_TIMESTAMP  FROM  DUAL;
21/04/21	21/04/21	21/04/21 20:47:18.529000000 +09:00	21/04/21 20:47:18.529000000 ASIA/SEOUL

CURRENT_DATE : 접속자의 시간

세션 시간과 포맷 변경
ALTER SESSION SET TIME_ZONE = '-1:0' 
ALTER SEESION NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';

SELECT SYSDATE FROM DUAL;
-- 2021-04-21 21:40:25


-- 날짜 추출함수 EXTRACT(YEAR/ MONTH/ DAY /HOUR /MINUTE/ SECOND FROM...)
SELECT EXTRACT( YEAR FROM SYSDATE ) FROM DUAL;
SELECT EXTRACT( MONTH FROM SYSDATE ) FROM DUAL;
SELECT EXTRACT( DAY FROM SYSDATE ) FROM DUAL;

SELECT EXTRACT( MONTH FROM SYSDATE) || '월' FROM DUAL;
-> 4월 이 출력된다

가입 회원 중에 비수기 (2, 3, 4 ,11, 12) 월 달에 가입한 회원을 조회하시오.
SELECT * FROM MEMBER WHERE EXTRACT(MONTH FROM REGDATE) IN ( 2, 3 ,4, 11, 12);

날짜를 누적하는 함수 ADD_MONTH(날짜 , 정수)
SELECT ADD_MONTHS(SYSDATE, 1) FROM DUAL;
SELECT ADD_MONTSH(SYSDATE, -1) FROM DUAL;

가입 회원 중에 가입한지 6개월이 안되는 회원을 조회하시오.
SELECT * FROM MEMBER WHERE ADD_MONTHS(SYSDATE,-6) < REGDATE;

6개월이 넘는 회원
SELECT * FROM MEMBER WHERE ADD_MONTHS(SYSDATE,-6) >= REGDATE;

날짜의 차이를 알아내는 함수 MONTHS_BETWEEN(날짜 , 날짜)
SELECT MONTHS_BETWEEN(SYSDATE , TO_DATE('2013-12-25')) FROM DUAL;

6개월이 안된 회원을 조회하기.
SELECT * FROM MEMBER WHERE MONTHS_BETWEEN(SYSDATE , REGDATE) <6 	;

 SELECT NEXT_DAY(SYSDATE , '월') FROM DUAL;
 -- 돌아오늘 요일에 해당하는 날짜를 알수있다.

 SELECT NEXT_DAY(SYSDATE, '토요일') FROM DUAL;

 SELECT NEXT_DAY(SYSDATE, 7 ) FROM DUAL;
-> 7 의 의미는 토  1=> 일 2=>월 3=>화 ..............

월의 마지막 일자를 알려주는 함수 LAST_DAY(날짜)
SELECT LAST_DAY(SYSDATE) FROM DUAL;

---------------------------------------- 변환함수 ----------------------------------------------

숫자를 문자열로 문자열을 날짜로 

숫자를 문자열로 : TO_CHAR()
문자열을 날짜로 : TO_DATE()
날짜를 문자열로 : TO_CHAR()
문자열을 숫자로 : TO_NUMBER()

NUMBER 형식을 문자열 ( VARCHAR2 ) 로 변환 TO_CHAR(NUMBER)

SELECT TO_CHAR(12345678, "$99,999,999,999,99" ) FROM DUAL;
-- 숫자 길이보다 길어야함. 숫자의패턴을 정하는것이다. 9라는것은 디지털 숫자를 의미한다.

포맷문자	설명
  9 	     : 숫자
  0          : 빈자리를 채우는 문자
  $          : 앞에 $표시
  ,          : 천 단위 구분자 표시
  .          : 소수점 표시

 SELECT TO_CHAR(12345678, '99,999,999') || 'HELLO' FROM DUAL 
--   12,345,678HELLO 가 출력됨.

 SELECT TRIM(TO_CHAR(12345678, '9,999,999,999')) || '원' FROM DUAL
-- 앞에 빈공간을 지우기위해 TRIM 함수를 쓴다. 
-> 12,345,678원이 출력된다.

 SELECT TRIM(TO_CHAR(12345678.3456, '9,999,999,999.99')) || '원' FROM DUAL
-- 소수점은 . 으로 처리할수 있고 그보다 많이 나오면 마지막에서 반올림한 값이나온다. 

  SELECT TRIM(TO_CHAR(12345678.3, '9,999,999,999.00')) || '원' FROM DUAL
--> 12,345,678.30원 이 출력된다.  

 SELECT TO_CHAR(SYSDATE , 'YY/MM/DD') FROM DUAL; 
-> 21/04/21 와 같이 출력된다.
 SELECT TO_CHAR(SYSDATE, 'YY/MM/DD HH24:MI') FROM DUAL; 
->21/04/21 22:23 와같이 출력된다
 SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') FROM DUAL; 
-> 2021-04-21 22:22:26 와 같이 출력된다
 SELECT TO_DATE('2014-03-31 12:23:03' , 'YYYY-MM-DD HH:MI:SS') FROM DUAL;
->2014-03-31 12:23:03 와 같이 출력된다.
 SELECT TO_TIMESTAMP('2014-03-31 12:23:03' , 'YYYY-MM-DD HH:MI:SS') FROM DUAL;
-> 14/03/31 12:23:03.000000000 와같이 출력된다.

문자열을 숫자형식으로 변환하는 함수 TO_NUMBER(문자열)
 SELECT TO_NUMBER('1994') FROM DULA;

 SELECT TO_NUMBER('2') + 3 FROM DUAL; 
-> 2 + 3 = 5가 나온다.

------------------------------------------- NULL 관련 함수 --------------------------------------

반환값이 NULL일 경우에 대체 값을 제공하는 NVL(NULL, 대체값) 함수
SELECT NVL(AGE, 0) FROM MEMBER;


 SELECT NULL + 3 FROM DUAL;
-> NULL이나온다.

 SELECT AGE + 3 FROM MEMBER;
-- AGE에 NULL이 있으면 에러가난다.

 SELECT NVL(AGE, 0) + 3 FROM MEMBER;
-- NULL 값을 0으로 대체해서 NULL인 아이는 3이나오고 나머지는 +3되서 출력된다.

 NVL에서 조건을 하나 더 확장한 NVL2(입력값, NOTNULL대체값, NULL대체값) 함수
 SELECT NVL2(AGE, 100/AGE , 0) FROM MEMBER;

 두 값이 같을 경우 NULL 그렇지 않은 경우 첫 번째 값 반환 NULLIF(값1, 값2) 함수
 SELECT NULLIF(AGE,39) FROM MEMBER;
-- AGE가 39이면 NULL 값을 반환한다.

  조건에 따른 값 선택하기 DECODE(기준값 ,비교값, 출력값, 비교값 ,출력값)
 SELECT DECODE(GENDER, '남' , 1 , 2) FROM MEMBER;
-- 남성이면 1 을 반환 남성이아니면 2를 반환하도록 하는 명령문

 SELECT DECODE(SUBSTR(PHONE, 1, 3) , 
		'010', '신규번호',
		'011', '구번호',
		'기타') || ',' || PHONE
		FROM MEMBER;
-- 010이면 신규번호 011이면 구번호 나머지는 기타번호로 출력하게한다 그뒤에 , PHONE번호를 출력한다.

------------------------------------------ SELECT 구절 -----------------------------------------

SELECT, FROM , WHERE , GROUP BY , HAVING, ORDER BY
위를 다외워야하고 위의 순서를 꼭 지켜줘야함!!!!

ODER BY -> 정렬하는 것

ASC, DESC 

ASC : 오름차순
DESC : 내림차순

이름을 기준으로 역순으로 정렬해서 조회하시오.
 SELECT * FROM NOTICE ORDER BY HIT;
-- 아무것도 안쓰면 무조건 오름차순으로 정렬하게된다.
 SELECT * FROM NOTICE ORDER BY HIT DESC;
-- 내림차순으로 정렬하게된다.

회원 중에서 '박'씨 성을 가진 회원을 조회하시오. ( 단 나이를 (오름차)순으로 정렬.
SELECT * FROM MEMBER WHERE NAME LIKE '박%' ORDER BY AGE ASC;


